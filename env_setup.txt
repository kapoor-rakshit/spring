Reference : https://javabrains.thinkific.com/courses/take/learning-spring-core/multimedia/2826189-setting-up
          : https://www.tutorialspoint.com/spring/spring_environment_setup.htm


Download the latest release from  :  https://repo.spring.io/release/org/springframework/spring

                                  :  download zip file - spring-framework-XXX.RELEASE-dist.zip  and  extract
                                     (This file/(bin folder) contains all required .jars)

Download Apache common loggings   :  http://commons.apache.org/proper/commons-logging/download_logging.cgi
                                     (Download BINARY zip file  and  extract)



1. On a new project in EclipseIDE

. Right click proj ---> Properties ---> Java Build Path ---> Libraries ---> Add library ---> userlibrary ---> UserLibraries
. either select already existing userlib or create NEW (name userlib)  ---> Add jars to lib dir ---> add SPRING and APACHE_COMMON_LOGGINGS jars from downloaded files above

NOTE : ALL .jars must be added in lib (mkdir yourself) dir at root of project
       ALL  sources file must be added in lib --> src (mkdir yourself)

--------------------------------------------------------------------------NOTES-------------------------------------------------

1. SPRING uses SPRING BEAN FACTORY to maintain OBJECT LIFECYCLE.
   Each bean is CONFIGURED with a class and CONFIGURED for a object.
   The factory uses the XML file to generate/configure a bean and then later refer to the object.
   "spring.xml" file must be in classpath ie src of project for ApplicationContext and AbstractApplicationContext



2. DEPENDENCY INJECTION is the most powerful feature of SPRING
.  SETTER INJECTION
.  CONSTRUCTOR INJECTION
.  OBJECT INJECTION



3. INNER BEANS
.  if a bean (object) is specific to be referenced for a specific bean (object) then use following syntax

<bean id="" class="">

  <property name="" ref=""></property>                  <!-- reference to external bean -->

  <property name="">                                    <!-- use of inner beans without ref-->

   <bean class="">
     <property name="" value=""></property>    
     <property name="" value=""></property>
   </bean>

  </property>

</bean>



4. ALIAS
use of another name of bean id as follows

<alias name="actual_bean_id"  alias="alias_id"></alias>



5. IDREF
use idref to make sure a id exist for the reference made. It will throw error if the bean with that id does not exist.

<property name="">

<idref="id_of_bean"></idref>

</property>



6. USING COLLECTIONS
use List, Hash, Map tools in SPRING

<property name="">

 <list>                        <!-- define list tag and give reference(s)/value(s) -->

  <ref bean=""></ref>          <!-- give reference to bean id -->
  <ref bean=""></ref>
  <ref bean=""></ref>

 </list>

</property>



7. BEAN AUTOWIRING
Avoids use of giving reference/property for each bean. Default is <bean autowire="off"></bean>
Can be done by specifying 'autowire' attribute in '<bean>' tag of class where reference is required , with values as:

a) "byName"  -  If name (id) of beans to be referenced is same as of member variables of class where they are required to be referenced.

b) "byType"  -  If a class (type) has only one member var of ref class it automatically wires that var with bean of that ref class.

c) "constructor"  -  Requires a constructor for autowiring , but class must have only one ref class var of ref bean.


It can also be done using @Autowired annotation.



8. BEAN SCOPES
scope of bean existence. Modified using 'scope' attribute of '<bean>' tag , with values as:

a) singleton  -  same instance for each .getbean("id") of same id passed to class object

b) prototype  -  a new instance is created for each reference or .getbean("id")

c) request    -  new bean per servlet request

d) global     -  new bean per session

e) session    -  new bean per global HTTP session



9. AWARE INTERFACES
used to make application aware of that they are called. They are "implemented" with the classname

a) ApplicationContextAware
use of bean context in class , same as if using SPRING's .xml wiring

b) BeanNameAware
use of bean name (id) when called



10. BEAN DEFINITION INHERITANCE
bean defn can be inherited to be used within another bean using 'parent' attribute of <bean> tag and using "id" of bean defn to be inherited as value to 'parent' attrib.



11. LIFECYCLE CALLBACKS
An interface(s) that can be implemented similar to constructor and destructor for a bean.
Requires AbstractApplicationContext  and  context.registerShutdownHook()   in mainjavaFILE (drawingapp.java) file

a) InitializingBean Interface
constructor method for bean   :  afterPropertiesSet()               defined in bean configured class

b) DisposableBean Interface
destructor method for bean    :  destroy()                          defined in bean configured class

-----------------------------we can use user defined constructor/destructor-------------------------------
use following attributes of "<bean>" tag with values as "custom_func_name" , NOTE : func must be defined within the bean configured class.
 
c) 'init-method'

d) 'destroy-method'

-----------------------------default constructor/destructor applicable to all beans can also be configured-----------
use following attributes of "<beans>" tag with values as "custom_func_name" , NOTE : func can be defined in any bean configured class since it is common to all beans.

e) 'default-init-method'

f) 'default-destroy-method'

NOTE : If both user defined and SPRING DEPENDENT constructor/destructor are used , SPRING dependent will be given priority.



12. BeanPostProcessor
A method can be defined for a bean such that they are called BEFORE and AFTER initialization of all bean(s).
Requires methods : postProcessAfterInitialization(Object bean, String beanName)   and    postProcessBeforeInitialization(Object bean, String beanName)



13. INTERFACE CODING
To make use of interface for calling (BEAN) classes accordingly in place of modifying the Class and Object for call.



14. ANNOTATIONS
JSR 250 is a Java Specification Request with the objective to develop annotations (ie. information about a software program that is not part of the program itself).

a) @Required                                   (exception handling for a reqd member var)  (used with setter method)
                                               (Requires corresponding BeanPostProcessorClass bean defined in XML file for checking Annotations before bean init.)

b) @Resource(name="id_of_bean")     xx         (provide a resource for member var instead of providing in property tag of bean)  (used with setter method)

c) @Resource                        xx         (if member var and bean id name are same, use this)

d) @PostConstruct                   xx         (Constructor from Annotations) (used with user defn func)

e) @PreDestroy                      xx         (Destructor from Annotations)  (used with user defn func)

--------------------------------------------------------STEREOTYPE ANNOTATIONS-----------------------------------------------------------
conforming to a fixed or general pattern; especially : a standardized picture

NOTE  :  (Requires   <context:component-scan base-package="your_package_name"/>   to be defined in XML)  (used with class defn)

f) @Component                                  (Notifies Spring container that this class is a bean, eliminates use of <bean></bean> defn in XML)
                                               
g) @Controller                                 (Notifies Spring container that this class is a Controller)

h) @Service                                    (Notifies Spring container that this class is a Service)

i) @Repository                                 (Notifies Spring container that this class is a Repository)

j) @Aspect                                     (To notify container that this class is an ASPECT)



15. MESSAGESOURCE
It is used to get the messages text from .properties file , NOTE : .properties file must be in classpath ie src of project
Define bean in .xml file for messageSource
Call in the required class using   context.getMessage(key, param_vals, default_val, locale_file_name)  in class with Main func

To call in a class which is not having Main func use : "MessageSource msgsrc_var"  declaration with setters and getters
                                                       either use @Autowired or use ref of MessageSource Bean for property of var in class to initialize var
                                                       use this.msgsrc_var.getMessage(key , new Object[] {center.getX(), center.getY()} , default_val , locale_file_name)
                                                       
Use {0} {1} {2} ... for param_vals args and not harcoded strings in .properties file

locale_file_name is useful in case of referring to .properties file other than specified in bean ie it will override.



16. EVENT HANDLING
Refer : https://javabrains.thinkific.com/courses/take/learning-spring-core/multimedia/2844465-event-handling-in-spring



17. ----------------------------------------------------------AOP (ASPECT ORIENTED PROGRAMMING)------------------------------------------------
A model of programming where ASPECT CONFIG tells which method to apply for which class. ASPECTS wrap around methods.
Steps involved ---> WRITE aspect ---> CONFIGURE where aspect apply to.

Configure     SPRING  distribution .jars  as in previous notes
              ASPECTJ distribution .jars for AOP by downloading from  :  http://www.eclipse.org/aspectj/downloads.php     ---> extract .jar file (without -src) and config lib .jar files
              AOP Alliance distb   .jars                              :  https://sourceforge.net/projects/aopalliance/    or   http://www.java2s.com/Code/Jar/a/Downloadaopalliancejar.htm
              CGLIB                .jars                              :  https://github.com/cglib/cglib
              ASM distb            .jars                              :  https://asm.ow2.io/

In spring.xml file include headers for AOP namespace tag(s).



Create a new class (Logging) that will act as ASPECT, using
@Aspect    :  To notify container that this class is an aspect
@Before    :  Required ASPECT ADVICE Annotation(s) to attach method(s) calls with this aspect method
@Component :  To make a java class as a BEAN    or   define bean in spring.xml file

Use       <aop:aspectj-autoproxy/>      in spring.xml to notify that AOP class/bean exists

To RESTRICT ASPECT advice being called on methods of other class(es) than required, use complete package_path of method  :  "execution(springAOPproj.model.Triangle.getName())"



WILDCARDS and POINTCUTS
To make the ASPECT method call attach to multiple methods use wildcards (*, ..) for pattern match   such that to call irrespective of RETURN_TYPE, METHOD_NAME etc...


ASPECT ADVICE ANNOTATION TYPES
@Before                            // Run before statement executes
@After                             // Run after statement executes
@AfterReturning                    // Run only if statement executes without exception
@AfterThrowing                     // Run if statement throws exception
@Around                            // Solves purpose of @Before, @After, @AfterThrowing   // Offers feature to catch returned object from TARGET method


ASPECT ADVICE METHODS
"execution"                                              // specify a particuler method declaration or pattern
"within"                                                 // specify class to execute all methods of class
"args"
"@annotation(package_name.CUSTOM_ANNOTATION_CLASS)"      // eliminates use of complex statements within POINTCUT(s) or PREDEFINED ASPECT_ANNOTATION
                                                         // by using CUSTOM_ANNOTATIONS being mentioned with TARGET method to attach ADVICE with
                                                         // (eg:- @Loggable attached to getTriangle() TARGET in ShapeService to call ADVICE in Logging)


@POINTCUT enables use of multiple ASPECTS being attached to a class method without need to write access annotation (eg:- @Before) again.

@Before("pointcut1 && pointcut2")                       // combine multiple pointcuts using &&
public void ASPECTMETHOD() { .. . }



-----------------XML way of configuring ASPECT class, without using Annotations----------------------

Refer    <aop:config>    </aop:config>     tag in spring.xml for syntax.



18. ----------------------------------------------SPRING DATA ACCESS (JDBC)--------------------------------------

Setup a database on dev machine (eg:- APACHE DERBY)
. download APACHE DERBY XXXX-bin-zip file from  :  https://db.apache.org/derby/derby_downloads.html      and     extract

. setup ENVIRONMENT VARIABLES
.. DERBY_HOME   val to  (dir which contains bin, lib, and other dirs)
.. Path         add val (DERBY_HOME\bin)


APACHE DERBY comes in SERVER mode and EMBEDDED mode
. To start DB in server mode, open terminal, run ./startNetworkServer (in UNIX/Mac) or startNetworkServer.bat (in Windows)

. DERBY comes with a client called ij, open other terminal window, run ./ij  (in UNIX/Mac) or ij.bat (in Windows)

. create connection to DB using ij client via connection string  :  connect 'jdbc:derby://localhost:1527/Shapes;create=TRUE;';
.. connect to SHAPES DB if exists else CREATE DB
.. create table, insert values etc... with SQL commands
.. to quit ij client run                                         :  exit;


Add DERBY libs to JAVA_BUILD   ie   derby.jar
                                    derbyclient.jar

NOTE : Make sure database is running while Running your application.

Create a DAO (Data Access Object) class and initialize DRIVERS, CONNECTIONS, QUERY, EXECUTE, PARSE RESULTS  etc...



DATABASE CONNECTION POOLING (DBCP)
Creating a new connection for each user can be time consuming, in order to perform a database transaction that might take milliseconds.
Opening a connection per user can be unfeasible in a publicly-hosted Internet application where the number of simultaneous users can be very large.
Accordingly, developers often wish to share a "pool" of open connections between all of the application's current users.
The number of users actually performing a request at any given time is usually a very small percentage of the total number of active users, 
and during request processing is the only time that a database connection is required.

Download DBCP and POOL from  :  http://commons.apache.org/proper/commons-dbcp/      and      https://commons.apache.org/proper/commons-pool/
Configure in spring.xml with other properties.



SPRING JDBC TEMPLATE
Provides code lines reduction using inbuilt template(s)
Generate getter(s) setter(s) for DataSource, JdbcTemplate vars in DAOCLASS
Initialize JdbcTemplate with a datasource    and     query over it.

CREATE table.........................................., check DAOCLASS

Provides multiple RETURN types (OBJECTs, LIST, etc...), check DAOCLASS

INSERT data, UPDATE/ALTER data, DELETE data  etc ...  check DAOCLASS

NOTE : LIMITATION of JDBC TEMPLATE is that it need to be used for referring (supplying values) the '?' placeholder in an order.
       So we use     NamedParameterJDBCTemplate for NAMED PLACEHOLDERS                 OR
                     SimpleJDBCTemplate         for both NAMED and '?' PLACEHOLDERS


DAO SUPPORT CLASSES
To reduce line of codes for getter(s)/setter(s) for instantiating JDBCTemplate, NamedPARAMETERJDBCTemplate, SimpleJDBCTemplate... etc.
SPRING provides DAO SUPPORT class(es) like JdbcDAOSUPPORT
                                           NamedPARAMETERJdbcDAOSUPPORT
which are required to be extended by our java daoclass.



INTEGRATE HIBERNATE with SPRING    (TODO for kapoor-rakshit)
Refer  :  https://javabrains.thinkific.com/courses/take/spring-data-access/multimedia/2934844-using-hibernate-with-spring

